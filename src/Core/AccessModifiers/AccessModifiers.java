package Core.AccessModifiers;

import java.lang.System.*;

public class AccessModifiers {
    /*
    Существует четыре доступа( от самого широкого до самого ограниченного) :
    Видимый для всех (public)
    Видимый для пакета и всех подклассов (protected)
    Видимый в пакете (по умолчанию, модификатор не требуется)
    Видимый только для класса (private)

    Переменная или метод, объявленные без модификатора контроля доступа доступны для любого другого класса в том же пакете.
    Поля в интерфейсе неявно являются public, static, final, а методы в интерфейсе по умолчанию являются public.
     */
    /*
    Модификатор доступа private
Модификатор private – методы, переменные и конструкторы, которые объявлены как private в Java могут быть доступны только в пределах самого объявленного класса.

Модификатор доступа private является наиболее ограничивающим уровенем доступа. Класс и интерфейсы не могут быть private.

Переменные, объявленные как private, могут быть доступны вне класса, если получающие их открытые (public) методы присутствуют в классе (ниже смотрите пример и пояснения).

Использование модификатора private в Java является основным способом, чтобы скрыть данные.

    Пример
    public class Logger {
    private String format;
    public String getFormat() {
       return this.format;
    }
     public void setFormat(String format) {
          this.format = format;
     }
    }
    Здесь переменная format класса Logger является private, так что нет никакого способа для других классов,
    чтобы получить и установить её значение напрямую.
    Таким образом, чтобы эта переменная была доступна для всего, мы определили два открытых (public) метода: getFormat(),
который возвращает значение format, и setFormat(String), который устанавливает её значение.
     */
    /*
    Модификатор доступа public
Модификатор public – класс, метод, конструктор, интерфейс и т.д. объявленные как public могут быть доступны
из любого другого класса.
Тем не менее, если к public классу в другом пакете мы пытаемся получить доступ, то public класс приходится импортировать.
     */
    /*
    Модификатор доступа protected
Модификатор protected – переменные, методы и конструкторы, которые объявляются как protected в суперклассе,
могут быть доступны только для подклассов в другом пакете или для любого класса в пакете класса protected.
     */
    /*
    Следующие правила в Java применяются для унаследованных методов:

Методы, объявленные как public в суперклассе, также должны быть public во всех подклассах.
Методы, объявленные как protected в суперклассе, должны либо быть либо protected, либо public в подклассах; они не могут быть private.
Методы, объявленные как private для всех не наследуются, так что нет никакого правила для них.
     */
    /*
    Модификаторы класса, метода, переменной и потока, используемые не для доступа
Java предоставляет ряд модификаторов не для доступа, а для реализации многих других функциональных возможностей:

модификатор static применяется для создания методов и переменных класса;
модификатор final используется для завершения реализации классов, методов и переменных;
модификатор abstract необходим для создания абстрактных классов и методов;
модификаторы synchronized и volatile используются в Java для потоков.
     */
    /*
    Модификатор static
Модификатор static – применяется для создания методов и переменных класса.

Переменные static
Ключевое слово static используется для создания переменных, которые будут существовать независимо от каких-либо экземпляров, созданных для класса. Только одна копия переменной static в Java существует вне зависимости от количества экземпляров класса.

Статические переменные также известны как переменные класса. В Java локальные переменные не могут быть объявлены статическими (static).

Методы static
Ключевое слово static используется для создания методов, которые будут существовать независимо от каких-либо экземпляров, созданных для класса.

В Java статические методы или методы static не используют какие-либо переменные экземпляра любого объекта класса, они определены. Методы static принимают все данные из параметров и что-то из этих параметров вычисляется без ссылки на переменные.

Переменные и методы класса могут быть доступны с использованием имени класса, за которым следует точка и имя переменной или метода.
     */
    /*
    Модификатор final
Модификатор final – используется для завершения реализации классов, методов и переменных.

Переменные final
Переменная final может быть инициализирована только один раз. Ссылочная переменная, объявленная как final,
никогда не может быть назначен для обозначения другого объекта.

Однако данные внутри объекта могут быть изменены. Таким образом, состояние объекта может быть изменено, но не ссылки.

С переменными в Java модификатор final часто используется со static, чтобы сделать константой переменную класса.

Методы final
Метод final не может быть переопределен любым подклассом.
Как упоминалось ранее, в Java модификатор final предотвращает метод от изменений в подклассе.

Главным намерение сделать метод final будет то, что содержание метода не должно быть изменено стороне.

Класс final
Основная цель в Java использования класса объявленного в качестве final заключается в предотвращении класс от быть подклассом.
Если класс помечается как final, то ни один класс не может наследовать любую функцию из класса final.
     */
    /*
Модификатор abstract
Модификатор abstract – используется для создания абстрактных классов и методов.

Класс abstract
Класс abstract не может создать экземпляр. Если класс объявлен как abstract, то единственная цель для него быть расширенным.

Класс не может быть одновременно abstract и final, так как класс final не может быть расширенным. Если класс содержит абстрактные методы, то он должен быть объявлен как abstract. В противном случае будет сгенерирована ошибка компиляции.

Класс abstract может содержать как абстрактные методы, а также и обычные.

Метод abstract
Метод abstract является методом, объявленным с любой реализацией. Тело метода (реализация) обеспечивается подклассом. Методы abstract никогда не могут быть final или strict.

Любой класс, который расширяет абстрактный класс должен реализовать все абстрактные методы суперкласса, если подкласс не является абстрактным классом.

Если класс в Java содержит один или несколько абстрактных методов, то класс должен быть объявлен как abstract. Абстрактный класс не обязан содержать абстрактные методы.

Абстрактный метод заканчивается точкой с запятой. Пример: public abstract sample();
     */
    /*
    Модификатор synchronized
Модификатор synchronized – используются в Java для потоков.

Ключевое слово synchronized используется для указания того, что метод может быть доступен только одним потоком одновременно.
В Java модификатор synchronized может быть применен с любым из четырех модификаторов уровня доступа.
     */
    /*
    Модификатор transient
Переменная экземпляра отмеченная как transient указывает виртуальной машине Java (JVM), чтобы пропустить определённую переменную при сериализации объекта, содержащего её.

Этот модификатор включён в оператор, что создает переменную, предшествующего класса или типа данных переменной.
     */
    /*
    Модификатор volatile
Модификатор volatile – используются в Java для потоков.

В Java модификатор volatile используется, чтобы позволить знать JVM, что поток доступа к переменной всегда должен объединять свою собственную копию переменной с главной копией в памяти.

Доступ к переменной volatile синхронизирует все кэшированные скопированные переменные в оперативной памяти.
Volatile может быть применен только к переменным экземпляра, которые имеют тип объект или private. Ссылка на объект volatile может быть null.
     */
}
