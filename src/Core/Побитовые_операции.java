package Core;

public class Побитовые_операции {

    public static void main(String[] args) {
        //  & (побитовое умножение)
        //Умножение производится поразрядно, и если у обоих операндов значения разрядов равно 1,
        // то операция возвращает 1, иначе возвращается число 0.
        int a1 = 2; //010
        int b1 = 5; //101
        System.out.println(a1&b1); // результат 0

        int a2 = 4; //100
        int b2 = 5; //101
        System.out.println(a2 & b2); // результат 4

        //  | (побитовое сложение)
        //Эта операция также производится по двоичным разрядам, но теперь возвращается единица,
        // если хотя бы у одного числа в этом разряде имеется единица (операция «логическое ИЛИ»).
        int a3 = 2; //010
        int b3 = 5; //101
        System.out.println(a3 | b3); // результат 7 - 111

        int a4 = 4; //100
        int b4 = 5; //101
        System.out.println(a4 | b4); // результат 5 - 101

        // ^ (побитовое исключающее ИЛИ)
        //Также эту операцию называют XOR, нередко ее применяют для простого шифрования:
        int number = 45; // 1001 Значение, которое надо зашифровать - в двоичной форме 101101
        int key = 102; //Ключ шифрования - в двоичной системе 1100110
        int encrypt = number ^ key; //Результатом будет число 1001011 или 75
        System.out.println("Зашифрованное число: " + encrypt);
        //Если у нас значения текущего разряда у обоих чисел разные, то возвращается 1, иначе возвращается 0.
        // Например, результатом выражения 9^5 будет число 12.

        //~ (побитовое отрицание)
        //Поразрядная операция, которая инвертирует все разряды числа:
        // если значение разряда равно 1, то оно становится равным нулю, и наоборот.
        byte a = 12;             // 0000 1100

        System.out.println(~a); //  1111 0011 или -13
    }

}
