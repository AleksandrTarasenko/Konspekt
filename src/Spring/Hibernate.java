package Spring;

public class Hibernate {
    /*
    Подготовка окружения для работы с Hibernate:
    для подключения Hibernate необходимо подключить MySQL (Это целый урок у Трегулова)
    Подключение Java приложения к базе

    Так же необходимо прописать конфигурацию
<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <property name="connection.url">jdbc:mysql://localhost:3306/my_db?useSSL=false&amp;serverTimezone=UTC</property>
        <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
        <property name="connection.username">bestuser</property>
        <property name="connection.password">bestuser</property>

        <property name="current_session_context_class">thread</property>
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
        <property name="show_sql">true</property>

    </session-factory>
</hibernate-configuration>

    Конфигурировать связь между классом и таблицей можно 2-мя способами:
    • С помощью XML файла
    • С помощью Java аннотаций
------------------------------------------------------------------------------------------------------------------------
    CRUD - паттерн который использует команды реализации по СОЗДАНИЮ, ЧТЕНИЮ, ОБНОВЛЕНИЮ и УДАЛЕНИЮ данных и таблиц
    Этот патерн обязывает создать реализацию методов делающих эту работу
    • CREATE - команда INSERT
    • READ - команда SELECT
    • UPDATE - команда UPDATE
    • DELETE - команда DELETE
------------------------------------------------------------------------------------------------------------------------
    Конфигурирация с помощью Java аннотаций
    Для реализации Hibernate с помощью Java аннотаций необходимо использовать Entity класс
    Entity класс – это Java класс, который отображает информацию определённой таблицы в Базе Данных (первод сущность)
    Entity класс – это POJO класс, в котором мы используем определённые Hibernate аннотации для связи класса с таблицей из базы
    POJO (Plain Old Java Object) – класс, удовлетворяющий ряду условий:
        private поля, getter-ы и setter-ы, конструктор без аргументов и т.д.
-----------------------------------------------------------------------------------------------------------------------
    Аннотации
    Аннотация @Entity говорит о том, что данный класс будет иметь отображение в базе данных
    Аннотация @Table говорит о том, к какой именно таблице мы привязываем класс
    Аннотация @Column говорит о том, к какому именно столбцу из таблицы мы привязываем поле класса
    Аннотация @Id говорит о том, что в таблице, столбец связанный с данным полем является Primary Key
------------------------------------------------------------------------------------------------------------------------
    import javax.persistence
    JPA (Java Persistence API) – это стандартная спецификация, которая описывает систему для управления сохранением Java объектов в
таблицы базы данных
    Hibernate – самая популярная реализация спецификации JPA
    Таким образом JPA описывает правила, а Hibernate реализует их.
-----------------------------------------------------------------------------------------------------------------------
    SessionFactory
    SessionFactory – фабрика по производству сессий.
    • SessionFactory читает файл hibernate.cfg.xml После чего SessionFactory знает, как должны создаваться сессии.
    • В Java приложении достаточно создать объект SessionFactory 1 раз и затем можно его переиспользовать.
------------------------------------------------------------------------------------------------------------------------
    Session
    Session – это обёртка вокруг подключения к базе с помощью JDBC.
    • Session – это основа для работы с Базой Данных.
    Именно с помощью Session мы будем добавлять, получать и делать другие операции с Java Объектами в Базе Данных.
    • Жизненный цикл Session обычно не велик. Мы получаем Session, делаем с помощью неё определённые операции и она становится не нужной

     */
}
