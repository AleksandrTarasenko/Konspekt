package Regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Regex2 {
    public static void main(String[] args) {
        String s1 = "ABDOP";
        //Для создания шаблона регулярного выражения используем класс Pattern(if,kjy)
        Pattern pattern1 = Pattern.compile("AB[C-F]OP");
        /*
        abc – Соответствует последовательно идущим abc
        [abc] – Соответствует или a, или b, или c
        [d-j] – Соответствует одной из букв из диапазона d - j
        [B-Fd-j3-8] - сначала ищем точное соответствие AB, затем букву из диапазона [C-F] и точное соответствие OP
        между диапазонами нет ни тире ни пробелов
        ^ - символ отрицания AB[^C-F]OP . [^C-F] - перечень букв исключенных из списка
        если не C-F подходит под выражение
        abc(e|5) – Соответствует либо букве a, либо букве b. Указывается в круглых скобках
        abc. - точка, любое соответствие
        ^abc – Соответствует выражению в начале строки
        abc$ – Соответствует выражению в конце строки
        \\d – Соответствует одной цифре
        \\D – Соответствует одной НЕ цифре(будут выводится все символы не цифры)
        (\\D{2,6}) не цифра будут выводится символы от 2 до 6 в пследовательности.
        прерывание количества к выводу по цифре или макс 6 и мин вход 2 символа
        2, - запятая сколько угодно
        \\w – Соответствует одной букве, цифре или «_» (ТОЛЬКО СИМВОЛЫ [A-Za-z0-9_])
        \W – Соответствует одному символу, который НЕ буква, НЕ цифра и НЕ «_»
        выражение+ – Соответствует 1 или большему количеству повторений ("\\w+") -
        знак + проверяет последовательно соответствует ли условию след значение
        в примере ("\\w+") будут выведены вс символы подряд подходящие по критерию w
        выражение{n} ("\\w{4})– Соответствует количеству повторений «n» (Соответствие содержит 4 символа)
        Если слово длинное то будет по 4 буквы разделять
        \\b – Соответствует границе слова или числа ("\\b\\d{2}\\b") -число из 2-х числе
        ни спереди ни сзади нет букв и чисел
        \\B – Соответствует границе НЕ слова и НЕ числа
        \\s – Соответствует пробельному символу (\t\n\r\f)
        tab, начало новой строки, символ новой строки, окончание страницы
        \\S – Соответствует НЕ пробельному символу
        Если необходимо выражение в поиске соответствовало ABAB необходимо символы последовательности взять в скобки
        и указать число сле символов ("(AB){2,3}") пример ABAB или ABABAB
        В выражении ("AB{2,3}") - {2,3} будет применяться только к B. пример ABB или ABBB
        выражение? – Соответствует 0 или 1 повторению ("D(AB)?") подходят D и DAB
        выражение* – Соответствует 0 или большему количеству повторений ("D(AB)?") подходят D и DAB и DABABAB
        \A – Соответствует выражению в начале String-а ("\\Aabcd")
        \A – Соответствует выражению в начале String-а ("abcd\\Z")
        ([abcd][efgh3-8]) будет смотреть из первого списка и из второго a4, df и прочие
        */

        /*
        compile - Возвращает объект типа Pattern
       в compile передаём регулярное выражение
         */
        //В Matcher - Шаблон проверяем на соответствие со String
        Matcher matcher = pattern1.matcher(s1);




        while (matcher.find()) { // find возвращает true, если совпадение найдено
            System.out.println("Position: " + matcher.start() + " " + matcher.group());
            //start - показывает № позиции откуда началось совпадение начинается отсчет с 0
            //group - выводят на экран совпадения
        }
    }
}
